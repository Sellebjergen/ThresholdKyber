from Compiler import floatingpoint
from circuit import Circuit
program.use_edabit(True)

# Params (Kyber512)
n = 256
q = 3329
r = 2
eta1 = 3
eta2 = 2

cbit = cbits.get_type(1)

# _____________________ Hash functions ________________________

Keccak_f = None

def keccak(x, rate, delim, output_len):

    global Keccak_f
    if Keccak_f is None:
        # only one instance
        Keccak_f = Circuit('Keccak_f')

    # whole bytes
    assert len(x.v) % 8 == 0
    # only one block
    r = rate
    assert len(x.v) < rate
    if x.v:
        n = x.v[0].n
    else:
        n = 1
    d = sbitvec([sbits.get_type(8)(delim)] * n)
    sbn = sbits.get_type(n)
    padding = [sbn(0)] * (r - 8 - len(x.v))
    P_flat = x.v + d.v + padding
    assert len(P_flat) == r
    P_flat[-1] = ~P_flat[-1]
    w = 64
    P1 = [P_flat[i * w:(i + 1) * w] for i in range(r // w)]

    S = [[[sbn(0) for i in range(w)] for i in range(5)] for i in range(5)]
    for x in range(5):
        for y in range(5):
            if x + 5 * y < r // w:
                for i in range(w):
                    S[x][y][i] ^= P1[x + 5 * y][i]

    def flatten(S):
        res = [None] * 1600
        for y in range(5):
            for x in range(5):
                for i in range(w):
                    j = (5 * y + x) * w + i // 8 * 8 + 7 - i % 8
                    res[1600 - 1 - j] = S[x][y][i]
        return res

    def unflatten(S_flat):
        res = [[[None] * w for j in range(5)] for i in range(5)]
        for y in range(5):
            for x in range(5):
                for i in range(w):
                    j = (5 * y + x) * w + i // 8 * 8 + 7 - i % 8
                    res[x][y][i] = S_flat[1600 - 1 -j]
        return res

    S = unflatten(Keccak_f(flatten(S)))

    Z = []
    while len(Z) <= output_len:
        for y in range(5):
            for x in range(5):
                if x + 5 * y < r // w:
                    Z += S[x][y]
        if len(Z) <= output_len:
            S = unflatten(Keccak_f(flatten(S)))
    return sbitvec.from_vec(Z[:output_len])

# SHA3-512
def G(m_prime, h):
    m_prime_sintbit = [sintbit(x_i) for x_i in m_prime] # Convert to sintbit to indicate that they contain bits.
    m_prime_sbit = [sbit(x_i) for x_i in m_prime_sintbit] # Conversion from sintbit to sbit can be done in any domain.
    input = m_prime_sbit + h  # Have to reverse inputs since lists of bits have index 0 to contain lsb, whereas hashing expects the order to be reversed

    to_hash = sbitvec.from_vec(input) #.reverse_bytes()
    out = keccak(to_hash, 576, 0x06, 512) # Note: Input and output for sha3_512 are bit-reversed

    return out.v[:256], out.v[256:]

# SHAKE256
def KDF(in_1, in_2):
    in_1_sintbit = [sintbit(x_i) for x_i in in_1] # Convert to sintbit to indicate that they contain bits.
    in_1_sbit = [sbit(x_i) for x_i in in_1_sintbit] # Conversion from sintbit to sbit can be done in any domain.
    input = in_1_sbit + in_2  # Have to reverse inputs since lists of bits have index 0 to contain lsb, whereas hashing expects the order to be reversed

    to_hash = sbitvec.from_vec(input) #.reverse_bytes()
    out = keccak(to_hash, 1088, 0x1F, 256) # Note: Input and output for sha3_512 are bit-reversed
    return out

# SHAKE256
def PRF(coins, N, eta):
    N_decomp = N.bit_decompose(bit_length = 8)

    input = coins + N_decomp
    to_hash = sbitvec.from_vec(input) #.reverse_bytes()
    out = keccak(to_hash, 1088, 0x1F, 64 * eta * 8) # Note: Input and output for sha3_512 are bit-reversed
    return out.v

    

# _____________________ Centre + bit op _______________________

# Centre
def centre(x_i_angle):
    # BitDecomp
    b = floatingpoint.BitDecFull(x_i_angle, 12)

    # BitAdd
    qp1_bits = cint(q + 1).bit_decompose(bit_length = 12)
    b_prime = floatingpoint.BitAdd(flipBits(b), qp1_bits)

    # BitNeg
    b_prime_prime = bitNeg(b_prime)

    # BitLT
    q_div_2 = cint(1665).bit_decompose(bit_length = 12)
    f=floatingpoint.BITLT(b, q_div_2, 12)

    # Compute <a>
    a = []
    for i in range(len(b)):
        a.append(f * b[i] + (1 - f) * b_prime_prime[i])

    return a

def flipBits(a_angle):
    return [sint.bit_not(bit) for bit in a_angle]

def bitNeg(a_angle):
    flipped = flipBits(a_angle)
    one_decomp = [cint(1)] + [cint(0)] * (len(flipped) - 1)
    return floatingpoint.BitAdd(flipped, one_decomp)

# _____________________ Rq arith. _______________________

zetas = [2285, 2571, 2970, 1812, 1493, 1422, 287, 202, 3158, 622, 1577, 182, 962, 2127, 1855, 1468, 
                     573, 2004, 264, 383, 2500, 1458, 1727, 3199, 2648, 1017, 732, 608, 1787, 411, 3124, 1758, 
                     1223, 652, 2777, 1015, 2036, 1491, 3047, 1785, 516, 3321, 3009, 2663, 1711, 2167, 126, 1469, 
                     2476, 3239, 3058, 830, 107, 1908, 3082, 2378, 2931, 961, 1821, 2604, 448, 2264, 677, 2054, 
                     2226, 430, 555, 843, 2078, 871, 1550, 105, 422, 587, 177, 3094, 3038, 2869, 1574, 1653, 3083, 
                     778, 1159, 3182, 2552, 1483, 2727, 1119, 1739, 644, 2457, 349, 418, 329, 3173, 3254, 817, 
                     1097, 603, 610, 1322, 2044, 1864, 384, 2114, 3193, 1218, 1994, 2455, 220, 2142, 1670, 2144, 
                     1799, 2051, 794, 1819, 2475, 2459, 478, 3221, 3021, 996, 991, 958, 1869, 1522, 1628]

f = 1441
inv_2_16 = 169

def mont_reduce(a):
    return a * inv_2_16 # mod q = 3329 implicit from arith. MPC mod prime

def ntt_mul(a, b):
    return mont_reduce(a * b)

def to_ntt(poly):
    k, l = 1, 128
    coeffs = Array.create_from(poly)
    while l >= 2:
        start = 0
        while start < 256:
            zeta = cint(zetas[k])
            k = k + 1
            for j in range(start, start + l):
                t = ntt_mul(zeta, coeffs[j+l])
                coeffs[j+l] = coeffs[j] - t
                coeffs[j]   = coeffs[j] + t
            start = l + (j + 1)
        l = l >> 1
    
    return coeffs

def from_ntt(poly):
        l, l_upper = 2, 128
        k = l_upper - 1
        coeffs = poly
        while l <= 128:
            start = 0
            while start < n:
                zeta = cint(zetas[k])
                k = k - 1
                for j in range(start, start+l):
                    t = coeffs[j]
                    coeffs[j]   = t + coeffs[j+l]
                    coeffs[j+l] = coeffs[j+l] - t
                    coeffs[j+l] = ntt_mul(zeta, coeffs[j+l])
                start = j + l + 1
            l = l << 1
        for j in range(n):
            coeffs[j] = ntt_mul(coeffs[j], f)
            
        return poly

def ntt_base_multiplication(a0, a1, b0, b1, zeta):
        r0  = ntt_mul(a1, b1)
        r0  = ntt_mul(r0, zeta)
        r0 += ntt_mul(a0, b0)
        r1  = ntt_mul(a0, b1)
        r1 += ntt_mul(a1, b0)
        return r0, r1
        
def ntt_coefficient_multiplication(f_coeffs, g_coeffs):
    new_coeffs = []
    for i in range(64):
        r0, r1 = ntt_base_multiplication(
                            f_coeffs[4*i+0], f_coeffs[4*i+1],
                            g_coeffs[4*i+0], g_coeffs[4*i+1],
                            zetas[64+i])
        r2, r3 = ntt_base_multiplication(
                            f_coeffs[4*i+2], f_coeffs[4*i+3],
                            g_coeffs[4*i+2], g_coeffs[4*i+3],
                            -zetas[64+i])
        new_coeffs += [r0, r1, r2, r3]
    return to_mpspdz_array(new_coeffs)

def polyvecNTT(poly):
    res = Matrix.same_shape(poly)
    for i in range(r):
        res[i] = to_ntt(poly[i])
    return res

def to_mpspdz_array(list):
    array = Array(n, sint)
    for i in range(n):
        array[i] = list[i]
    return array

def inner_prod_NTT(u, s):
    d = Array(n, sint)
    for i in range(r):
        ui = Array.create_from(u[i])
        si = Array.create_from(s[i])
        d += ntt_coefficient_multiplication(ui, si)
    return from_ntt(d)


def scalar_mult(a, b):
    res = Array(len(a), sint)
    for i in range(len(a)):
        res[i] = a[i] * b
    return res

def poly_sub(a, b):
    res = Array(len(b), sint)
    for i in range(len(a)):
        res[i] = a[i] - b[i]
    return res

def poly_add(a, b):
    res = Array(n, sint)
    for i in range(n):
        res[i] = a[i] + b[i]
    return res

def copy_polyvec(pv):
    pv_copy = Matrix(r, n, sint)
    for i in range(r):
        for j in range(n):
            pv_copy[i][j] = pv[i][j]
    return pv_copy


# _____________________ Kyber encryption _______________________

def CBD(rand, eta):
    f = Array(n, sint)
    for i in range(n):
        a = sint(0)
        b = sint(0)
        for j in range(eta):
            a = a + sint(rand[2*i*eta + j])
            b = b + sint(rand[2*i*eta + eta + j])
        f[i] = a - b
    return f


def CPAPKE_kyber_encryption(A_t, t, m, coins):
    N = cint(0)
    r_bold = Matrix(r, n, sint)
    for i in range(r):
        r_bold[i] = CBD(PRF(coins, N, eta1), eta1)
        N = N + 1
    
    e_1_bold = Matrix(r, n, sint)
    for i in range(r):
        e_1_bold[i] = CBD(PRF(coins, N, eta2), eta2)
        N = N + 1
    e_2 = CBD(PRF(coins, N, eta2), eta2)
    
    # Compute A^t r + e_1
    r_bold_ntt = polyvecNTT(r_bold)
    u = Matrix(r, n, sint)
    for i in range(r):
        res = inner_prod_NTT(A_t[i], r_bold_ntt)
        for j in range(n):
            u[i][j] = res[j] + e_1_bold[i][j]

    # Compute tr + e_2 + m scaled
    tr = inner_prod_NTT(t, r_bold_ntt)
    tre = poly_add(tr, e_2)
    m_scaled = scalar_mult(m, 1665)
    v = poly_add(tre, m_scaled)

    return u, v


# _____________________ main functionality _______________________

# KEM decapsulation:
def kem_decap(u, v, s_angle):
    # v - u^T <s>
    u_ntt = polyvecNTT(u)
    x = inner_prod_NTT(u_ntt, s_angle)
    x = poly_sub(v, x)

    y = [x_i + sint(832) for x_i in x]
    w = [centre(y_i) for y_i in y]
    m_prime = [w_i[-1] for w_i in w] # get msb of each w_i
    return m_prime

def re_encryption(k_angle, hash_pk, A_t, t):
    K_bar_prime, r_prime = G(k_angle, hash_pk)
    u_prime, v_prime = CPAPKE_kyber_encryption(A_t, t, k_angle, r_prime)
    return u_prime, v_prime, K_bar_prime

def key_derivation(u_prime, v_prime, u, v, K_bar_prime, hash_c, z):
    test = sint(1)
    # Check u
    for i in range(r):
        for j in range(n):
            check = u_prime[i][j] == u[i][j]
            test = test * check
    # Check v
    for i in range(n):
        check = v_prime[i] == v[i]
        test = test * check

    # Compute KDF input
    in_1 = [test*sint(k_i) for k_i in K_bar_prime]
    in_2 = [(1 - test)*z_i for z_i in z]
    input = [sint(0)] * 256
    for i in range(256):
        input[i] = in_1[i] + in_2[i]

    return KDF(input, hash_c)

# _____________________ Testing _______________________

# Testing of centered
def test_centre():
    # Result should be 111010110111 (-329, see https://www.exploringbinary.com/twos-complement-converter/)
    centered = centre(sint(3000))
    print_ln(len(centered))
    for i in range(len(centered)):
        print_ln("%s", centered[i].reveal())

    # Should just return standard bit representation of 1000, since 1000 < q/2
    centered2 = centre(sint(1000)) 
    print_ln(len(centered2))
    for i in range(len(centered2)):
        print_ln("%s", centered2[i].reveal())

# Testing of rq_mul
# Should return [-12, 18] corresponding to -12 + 18x
def test_rq_mult(): 
    lhs = Array(4, sint)
    lhs[0], lhs[1] = sint(3), sint(3)

    rhs = Array(3, cint)
    rhs[0], rhs[1] = cint(1), cint(5)

    res = rq_mult(lhs, rhs, 2)
    res.print_reveal_nested()


def test_inner_prod_sub():
    lhs = Matrix(r, n, sint)
    rhs = Matrix(r, n, cint)

    lhs[0][0] = sint(3200)
    lhs[0][1] = sint(17)

    rhs[0][0] = cint(300)
    rhs[0][1] = cint(42)

    # Expected result is [1248, -318, 714], since 318 + 3011 = 3329
    res = inner_prod_NTT(polyvecNTT(lhs), polyvecNTT(rhs)) 
    res.print_reveal_nested() 

    # Expected result is [-1071, 1192, -714], since 177 - 1248 = -1071 and 874 - -318 = 1192
    v = Array(n, cint)
    v[0] = cint(177)
    v[1] = cint(874)
    res2 = poly_sub(v, res)
    res2.print_reveal_nested()

# Should return
def test_PRF():
    res = PRF([sbit(0)] * 256, cint(0), 3)
    for i in range(len(res)):
        print_ln("%s", res[i].reveal())

def test_enc():
    u, v, A_t, t, hash_c = read_public_values_from_file()
    print_ln("A transposed")
    for i in range(r):
        A_t[i].print_reveal_nested()
    u, v = CPAPKE_kyber_encryption(A_t, t, [sint(0)] * 256, [sbit(0)] * 256)
    print_ln("v")
    v.print_reveal_nested()
    print_ln("u")
    u.print_reveal_nested()

def test_key_deriv():
    u, v, A_t, t, hash_c = read_public_values_from_file()
    # 0x68daf96d3cfd70be40b30779a60ce3fb0226a42cb497a327f1237e108fd16cda
    poss_key = key_derivation(u, v, u, v, [sint(1)]*256, [cbit(0)] * 256, [sint(0)] * 256) 
    poss_key.reveal_print_hex()
    # 0x7ea5f2ea9e9487de4753918bbf5308eb91fa641889236c55d708ecb4d9666a36
    poss_key = key_derivation(u, v, u, Array(n, sint), [sint(1)]*256, [cbit(0)] * 256, [sint(0)] * 256)
    poss_key.reveal_print_hex()

# Helper function
# Message extraction
def print_sints(k_angle):
    k_clear = Array(n, cint)
    for i in range(len(k_angle)):
        k_clear[i] = k_angle[i].reveal()
    k_clear.print_reveal_nested()


# _____________________ Get Input _______________________

def read_s_from_file():
    s = Matrix(r, n, sint)
    s.input_from(0)
    z = Array(256, sint)
    z.input_from(0)

    return s, z

def read_public_values_from_file():
    u = Matrix(r, n, cint)
    v = Array(n, cint)
    A_t = MultiArray([r, r, n], cint)
    t = Matrix(r, n, cint)
    hash_c = []
    hash_pk = []

    for i in range(r):
        for j in range(n):
            u[i][j] = public_input()

    for i in range(n):
        v[i] = public_input()

    for i in range(r):
        for j in range(r):
            for l in range(n):
                A_t[i][j][l] = public_input()

    for i in range(r):
        for j in range(n):
            t[i][j] = public_input()

    for i in range(256):
        hash_c.append(public_input())

    for i in range(256):
        hash_pk.append(public_input())

    return u, v, A_t, t, hash_c, hash_pk

def test_input():
    s_angle, z = read_s_from_file()
    s_angle.print_reveal_nested()
    u, v, A_t, t, c_hash, hash_pk = read_public_values_from_file()
    u.print_reveal_nested()
    v.print_reveal_nested()

def reverse(bits):
    rev = []
    for i in range(len(bits)):
        rev.append(bits[(len(bits) - 1) - i])
    return rev

# _____________________ Main _______________________

def run_ddec(u, v, s_angle, hash_pk, A_t, t, hash_c, z):
    # Run protocol
    m_prime_angle = kem_decap(u, v, s_angle)
    u_prime, v_prime, K_bar_prime = re_encryption(m_prime_angle, hash_pk, A_t, t)
    key = key_derivation(u_prime, v_prime, u, v, K_bar_prime, hash_c, z)
    print_sints(key)


#test_centre()
#test_rq_mult()
#test_inner_prod_sub()
#test_input()
#test_PRF()
#test_enc()
#test_key_deriv()

s_angle, z = read_s_from_file()
u, v, A, t, hash_c, hash_pk = read_public_values_from_file()
iterations = 1
for i in range(iterations):
    run_ddec(u, v, s_angle, hash_pk, A, t, hash_c, z)