d = 256
k = 2
q = 3329

player_numb = 2

# _____________________ Rq arith. _______________________

zetas = [2285, 2571, 2970, 1812, 1493, 1422, 287, 202, 3158, 622, 1577, 182, 962, 2127, 1855, 1468, 
                     573, 2004, 264, 383, 2500, 1458, 1727, 3199, 2648, 1017, 732, 608, 1787, 411, 3124, 1758, 
                     1223, 652, 2777, 1015, 2036, 1491, 3047, 1785, 516, 3321, 3009, 2663, 1711, 2167, 126, 1469, 
                     2476, 3239, 3058, 830, 107, 1908, 3082, 2378, 2931, 961, 1821, 2604, 448, 2264, 677, 2054, 
                     2226, 430, 555, 843, 2078, 871, 1550, 105, 422, 587, 177, 3094, 3038, 2869, 1574, 1653, 3083, 
                     778, 1159, 3182, 2552, 1483, 2727, 1119, 1739, 644, 2457, 349, 418, 329, 3173, 3254, 817, 
                     1097, 603, 610, 1322, 2044, 1864, 384, 2114, 3193, 1218, 1994, 2455, 220, 2142, 1670, 2144, 
                     1799, 2051, 794, 1819, 2475, 2459, 478, 3221, 3021, 996, 991, 958, 1869, 1522, 1628]

f = 1441
inv_2_16 = 169

def mont_reduce(a):
    return a * inv_2_16 # mod q = 3329 implicit from arith. MPC mod prime

def ntt_mul(a, b):
    return mont_reduce(a * b)

def to_ntt(poly):
    k, l = 1, 128
    coeffs = Array.create_from(poly)
    while l >= 2:
        start = 0
        while start < 256:
            zeta = cint(zetas[k])
            k = k + 1
            for j in range(start, start + l):
                t = ntt_mul(zeta, coeffs[j+l])
                coeffs[j+l] = coeffs[j] - t
                coeffs[j]   = coeffs[j] + t
            start = l + (j + 1)
        l = l >> 1
    
    return coeffs

def from_ntt(poly):
        l, l_upper = 2, 128
        k = l_upper - 1
        coeffs = poly
        while l <= 128:
            start = 0
            while start < d:
                zeta = cint(zetas[k])
                k = k - 1
                for j in range(start, start+l):
                    t = coeffs[j]
                    coeffs[j]   = t + coeffs[j+l]
                    coeffs[j+l] = coeffs[j+l] - t
                    coeffs[j+l] = ntt_mul(zeta, coeffs[j+l])
                start = j + l + 1
            l = l << 1
        for j in range(d):
            coeffs[j] = ntt_mul(coeffs[j], f)
            
        return poly

def ntt_base_multiplication(a0, a1, b0, b1, zeta):
        r0  = ntt_mul(a1, b1)
        r0  = ntt_mul(r0, zeta)
        r0 += ntt_mul(a0, b0)
        r1  = ntt_mul(a0, b1)
        r1 += ntt_mul(a1, b0)
        return r0, r1
        
def ntt_coefficient_multiplication(f_coeffs, g_coeffs):
    new_coeffs = []
    for i in range(64):
        r0, r1 = ntt_base_multiplication(
                            f_coeffs[4*i+0], f_coeffs[4*i+1],
                            g_coeffs[4*i+0], g_coeffs[4*i+1],
                            zetas[64+i])
        r2, r3 = ntt_base_multiplication(
                            f_coeffs[4*i+2], f_coeffs[4*i+3],
                            g_coeffs[4*i+2], g_coeffs[4*i+3],
                            -zetas[64+i])
        new_coeffs += [r0, r1, r2, r3]
    return to_mpspdz_array(new_coeffs)

def polyvecNTT(poly):
    res = Matrix.same_shape(poly)
    for i in range(k):
        res[i] = to_ntt(poly[i])
    return res

def to_mpspdz_array(list):
    array = Array(d, sint)
    for i in range(d):
        array[i] = list[i]
    return array

def inner_prod_NTT(u, s):
    prod = Array(d, sint)
    for i in range(k):
        ui = Array.create_from(u[i])
        si = Array.create_from(s[i])
        prod += ntt_coefficient_multiplication(ui, si)
    return from_ntt(prod)


def scalar_mult(a, b):
    res = Array(len(a), sint)
    for i in range(len(a)):
        res[i] = a[i] * b
    return res

def poly_sub(a, b):
    res = Array(len(b), sint)
    for i in range(len(a)):
        res[i] = a[i] - b[i]
    return res

def poly_add(a, b):
    res = Array(d, sint)
    for i in range(d):
        res[i] = a[i] + b[i]
    return res

def copy_polyvec(pv):
    pv_copy = Matrix(k, d, sint)
    for i in range(k):
        for j in range(d):
            pv_copy[i][j] = pv[i][j]
    return pv_copy


# _____________________ Main code _______________________

def read_sk_input():
    s_values = MultiArray([player_numb, k, d], sint)
    e_values = MultiArray([player_numb, k, d], sint)
    for p in range(player_numb):
        s_values[p].input_from(p)
        e_values[p].input_from(p)
    return s_values, e_values

def get_rand_A():
    A = MultiArray([k, k, d], regint)
    for i in range(k):
        for j in range(k):
            for l in range(d):
                A[i][j][l] = regint.get_random(64)
    return A

def dkeygen(s_values, e_values):
    # Sum
    s_angle = Matrix(k, d, sint)
    e_angle = Matrix(k, d, sint)
    for p in range(player_numb):
        for i in range(k):
            for j in range(d):
                s_angle[i][j] += s_values[p][i][j]
                e_angle[i][j] += e_values[p][i][j]

    A = get_rand_A()
    z = Array(256, sint)
    for i in range(256):
        z[i] = sint.get_random_bit()

    t_angle = Matrix(k, d, sint)

    # t = As + e
    s_ntt = polyvecNTT(s_angle)
    for i in range(k):
        
        A[i] = polyvecNTT(A[i])
        res = inner_prod_NTT(A[i], s_ntt)
        for j in range(d):
            t_angle[i][j] = res[j] + e_angle[i][j]

    t = t_angle.reveal()

    # Here A, s_ntt, t are on NTT form at the end
    return A, t, s_ntt, e_angle, z

# _____________________ Testing _______________________

def test_dkeygen():
    # Mock input values
    s_values = MultiArray([player_numb, k, d], sint)
    e_values = MultiArray([player_numb, k, d], sint)

    s_values[0][0][42] = 500
    s_values[1][0][12] = 300

    e_values[0][0][15] = 1
    e_values[1][0][65] = 3

    A, t, s, e, z = dkeygen(s_values, e_values)

    t.print_reveal_nested()

#s_p, e_p = read_sk_input()
#A, t, s_ntt, e_angle, z = dkeygen(s_p, e_p)
#t.print_reveal_nested()

test_dkeygen()

