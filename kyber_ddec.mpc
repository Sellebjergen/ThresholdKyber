from circuit import sha3_256

# Params (Kyber512)
n = 256
q = 3329
r = 2

# Centre:
#
# Input:
# Output:
def centre(x_i_angle):
    # BitDecomp
    b = x_i_angle.bit_decompose(bit_length = 12)

    # BitAdd
    q_plus_1 = cint(q + 1)
    qp1_bits = q_plus_1.bit_decompose(bit_length = 12)
    b_prime = sint.bit_adder(flipBits(b), qp1_bits)

    # BitNeg
    b_prime_prime = bitNeg(b_prime)

    # BitLT
    f = x_i_angle < 1665

    # Compute <a>
    a = []
    for i in range(len(b)):
        a.append(f * b[i] + (1 - f) * b_prime_prime[i])

    return a

def flipBits(a_angle):
    flipped = []
    for i in range(len(a_angle)):
        flipped.append(sint.bit_not(a_angle[i]))
    return flipped

def bitNeg(a_angle):
    flipped = flipBits(a_angle)
    one = cint(1)
    one_decomp = one.bit_decompose(bit_length = len(flipped))
    return sint.bit_adder(flipped, one_decomp)

# KEM decapsulation:
#
# Input:
# Output:
def kem_decap(u, v, s_angle):
    # v - u^T <s>
    x = inner_prod(u, s_angle, f)
    x = poly_sub(v, x)
    x.print_reveal_nested()
    w = []
    for i in range(len(x)):
        w.append(centre(x[i]))
    k = []
    for i in range(len(w)):
        k.append(w[i][len(w[i]) - 1]) # get msb of each w_i
    return k

def inner_prod(u, s, f):
    d = Array(len(f), sint)
    for i in range(r):
        u_i = u.get_column(i)
        s_i = s.get_column(i)
        d_i = rq_mult(u_i, s_i, f)
        for j in range(len(d_i)):
            d[j] = d[j] + d_i[j]
    return d

def rq_mult(a, b, f):
    prod = poly_mult(a, b)
    rem = poly_rem(prod, f)
    return rem

def poly_mult(a, b):
    res = Array(len(a) + len(b), sint)
    for i in range(len(a)):
        for j in range(len(b)):
            res[i + j] = res[i + j] + a[i] * b[j]
    return res

def poly_sub(a, b):
    res = Array(len(b), sint)
    for i in range(len(a)):
        res[i] = a[i] - b[i]
    return res

def poly_mul_const(a, const):
    for i in range(len(a)):
        a[i] = a[i] * const
    return a

def poly_rem(a, divisor):
    rem = copy(a)

    """ @while_do(lambda x: x < n_bidders, regint(0))
    def _(i):
        #nonlocal actual_capacity_of_solution
        current_bidder = bidders[i]
        actual_solution.append(current_bidder)  
        actual_capacity_of_solution.iadd(current_bidder[2])
        return i+1 """
    @while_do(lambda: ((deg(rem) > sint(0)) * (deg(rem) >= deg(divisor))))
    def _():
        t = lead(rem) / lead(divisor)
        rem.update(poly_sub(rem, poly_mul_const(divisor, t)))
    return rem

def deg(a):
    degree = sint(0)
    for i in range(len(a)):
        degree = (a[i] == sint(0)).if_else(degree, sint(i))
    return degree

def lead(a):
    lead = sint(0)
    for i in range(len(a)):
        lead = (a[i] == sint(0)).if_else(lead, a[i])
    return lead

def copy(a):
    rem = Array(n, sint)
    for i in range(len(a)):
        rem[i] = a[i]
    return rem

# Hash check:
#
# Input:
# Output:
def hash_check(k_angle, c_2):
    k_as_sbits = []
    for i in range(len(k_angle)):
        k_as_sbits.append(sbit(k_angle[i]))
    digest = sha3_256(sbitvec.from_vec(k_as_sbits + c_2).reverse_bytes())
    digest.reveal_print_hex()

# Message extraction: Does not output the message m, but rather the key k
# The message can then be extracted using the key outside MP-SPDZ. This is more efficient (i think).
#
# Input: k_bits is an array of sint(0)/sint(1) values representing the bits of the key
# Output: The key k.
def msg_ext(k_angle):
    k_bits_clear = Array(n, cint)
    for i in range(len(k_angle)):
        k_bits_clear[i] = k_angle[i].reveal()
    k_bits_clear.print_reveal_nested()

""" # Concrete input
mock_k_angle = Array(n, sint)
mock_k_angle[15] = sint(1)
cbit = cbits.get_type(1)
c2 = [cbit(0)] * n
c3 = [cbit(0)] * n

s_angle = Matrix(n, r, sint)
ct_1 = Matrix(n, r, cint)
ct_2 = Array(n, cint)

# Run protocol
kem_decap(ct_1, ct_2, s_angle)
#hash_check(mock_k_angle, c2) # Conversion of sint to sbit is huge time sink, commented out for testing
msg_ext(mock_k_angle)

# Testing of centered
# Result should be 111010110111 (-329, see https://www.exploringbinary.com/twos-complement-converter/)
centered = centre(sint(3000))
print_ln(len(centered))
for i in range(len(centered)):
    print_ln("%s", centered[i].reveal())

# Should just return standard bit representation of 1000, since 1000 < q/2
centered2 = centre(sint(1000)) 
print_ln(len(centered2))
for i in range(len(centered2)):
    print_ln("%s", centered2[i].reveal()) """

# Testing of rq_mul
f = Array(n, cint)
f[0], f[2] = cint(1), cint(0)

lhs = Array(4, sint)
lhs[0], lhs[1], lhs[2], lhs[3] = sint(3), sint(5), sint(0), sint(8)

rhs = Array(3, cint)
rhs[0], rhs[1], rhs[2] = cint(1), cint(1), cint(5)

res = rq_mult(lhs, rhs, f)
res.print_reveal_nested()


